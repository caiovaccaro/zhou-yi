html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='http://yui.yahooapis.com/pure/0.6.0/pure-min.css')
    style(type='text/css').
      body {
        padding: 100px;
      }
      input {
        margin-right: 10px;
      }

  body
    form.pure-form.pure-form-stacked
      fieldset
        h3 Quais são os maiores desafios do seu projeto?
        each challenge, index in db.challenges
          label.pure-checkbox
            input(type='checkbox', name="challenge", value=index)
            span= challenge

      fieldset
        h3 Qual a duração do projeto (tempo de desenvolvimento + tempo que ficará online)?
        each time, index in db.time
          label.pure-radio
            input(type='radio', name="time", value=index)
            span= time
      br
      p#response

      script(src='/socket.io/socket.io.js')
      script.
        var socket = io(),
          inputs = document.getElementsByTagName('input'),
          inputsLength = inputs.length,
          i

        socket.on('response', function(response) {
          var conceptLine = response.Concepts.length > 1 ? "Você pode usar um desses <b>conceitos</b>: " : "O melhor <b>conceito</b> nesse caso é: ",
            apisLine = response.APIs.length > 1 ? "Você pode usar um desses tipos de <b>API</b>: " : "O melhor tipo de <b>API</b> nesse caso é: ",
            frameworksLine = response.Frameworks.length > 1 ? "Você pode usar um desses tipos de <b>frameworks</b>: " : "O melhor tipo de <b>framework</b> nesse caso é: ";
            finalLine = conceptLine + response.Concepts.join(' ou ') + '. ' + apisLine + response.APIs.join(' ou ') + '. ' + frameworksLine + response.Frameworks.join(' ou ') + '.';

            document.getElementById('response').innerHTML = finalLine;
        });

        iterateInputs(function(input) {
          input.addEventListener('change', syncRequest);
        });

        function iterateInputs(callback) {
          for(i = 0; i < inputsLength; i++) {
            callback(inputs[i])
          }
        }

        function syncRequest() {
          var request = {
            time: [],
            challenge: []
          };

          iterateInputs(function(input) {
            if(input.checked) request[input.name].push(input.value)
          });

          makeRequest(request);
        }

        function makeRequest(request) {
          socket.emit('change', request)
        }
